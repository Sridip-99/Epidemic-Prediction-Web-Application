"""
Django settings for Epidemic_prediction project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import shutil
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jaoh*e%obz32!)acq*v#0-&&9zu#ofi1)pij8%fvadlpt07#2&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['localhost']


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default for Django admin
    'signup_app.backends.CustomAuthBackend',     # Your custom backend
]
SESSION_COOKIE_NAME = 'app_session'  # For the application
ADMIN_SESSION_COOKIE_NAME = 'admin_session'

class CustomSessionMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        if request.path.startswith('/admin'):
            request.session._session_key = 'admin_session'
        else:
            request.session._session_key = 'app_session'
        response = self.get_response(request)
        return response


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Custom apps
    'signup_app',
    'tool_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom middleware
    'Epidemic_prediction.middleware.admin_session.AdminSessionMiddleware',
    'signup_app.middleware.user_session.UserSessionMiddleware',
]

# Separate session for admin users
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_NAME = 'admin_sessionid'  # Custom cookie for regular users
SESSION_COOKIE_SECURE = True  # Enable for HTTPS
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = False  # JavaScript needs access for CSRF

ROOT_URLCONF = 'Epidemic_prediction.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,"templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Epidemic_prediction.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': BASE_DIR /'user_database',
#         'USER': 'your_mysql_user',
#         'PASSWORD': 'your_mysql_password',
#         'HOST': 'localhost',  # or the hostname where your MySQL server is running
#         'PORT': '3306',      # or the port on which your MySQL server is listening
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Directory for uploaded datasets
UPLOADED_DATASETS_ROOT = os.path.join(BASE_DIR, 'uploaded_datasets')

# Directory for processed output files
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Clear the media folder on server restart
if os.path.exists(MEDIA_ROOT):
    shutil.rmtree(MEDIA_ROOT)
    os.makedirs(MEDIA_ROOT)

# Clear the uploaded_datasets folder on server restart
if os.path.exists(UPLOADED_DATASETS_ROOT):
    shutil.rmtree(UPLOADED_DATASETS_ROOT)
    os.makedirs(UPLOADED_DATASETS_ROOT)

# Create the folders if they donâ€™t exist
for directory in [UPLOADED_DATASETS_ROOT, MEDIA_ROOT]:
    if not os.path.exists(directory):
        os.makedirs(directory)

LOGIN_URL = '/admin/login/'  # Redirect unauthorized access to the admin login
LOGIN_REDIRECT_URL = 'login'
# LOGOUT_REDIRECT_URL = 'login'


# Use console backend for testing
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# If you plan to use a real SMTP server
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Example for Gmail
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # Fetch from .env
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')  # Fetch from .env
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')  # Optional


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'